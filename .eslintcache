[{"/Users/grigio/Sites/affirm/src/App.tsx":"1","/Users/grigio/Sites/affirm/src/layout/content.tsx":"2","/Users/grigio/Sites/affirm/src/index.tsx":"3","/Users/grigio/Sites/affirm/src/modules/cardForm/cardForm.tsx":"4","/Users/grigio/Sites/affirm/src/modules/cardForm/partials/cardDetails.tsx":"5","/Users/grigio/Sites/affirm/src/modules/cardForm/partials/cardImages.tsx":"6","/Users/grigio/Sites/affirm/src/common/validations/baseValidation.ts":"7","/Users/grigio/Sites/affirm/src/common/validations/visaValidation.ts":"8","/Users/grigio/Sites/affirm/src/common/validations/amexValidation.ts":"9"},{"size":176,"mtime":1610216767642,"results":"10","hashOfConfig":"11"},{"size":275,"mtime":1610217742815,"results":"12","hashOfConfig":"11"},{"size":196,"mtime":1610217263737,"results":"13","hashOfConfig":"11"},{"size":1355,"mtime":1610231468259,"results":"14","hashOfConfig":"11"},{"size":3823,"mtime":1610231302509,"results":"15","hashOfConfig":"11"},{"size":547,"mtime":1610219204590,"results":"16","hashOfConfig":"11"},{"size":845,"mtime":1610228027481,"results":"17","hashOfConfig":"11"},{"size":616,"mtime":1610229612929,"results":"18","hashOfConfig":"11"},{"size":707,"mtime":1610229691179,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"wwqcnw",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/grigio/Sites/affirm/src/App.tsx",[],["41","42"],"/Users/grigio/Sites/affirm/src/layout/content.tsx",[],"/Users/grigio/Sites/affirm/src/index.tsx",[],"/Users/grigio/Sites/affirm/src/modules/cardForm/cardForm.tsx",[],"/Users/grigio/Sites/affirm/src/modules/cardForm/partials/cardDetails.tsx",["43"],"import React, { useEffect } from 'react';\nimport { useDebounce } from '@react-hook/debounce'\nimport AmexValidation from '../../../common/validations/amexValidation';\nimport VisaValidation from '../../../common/validations/visaValidation';\nimport { IFormState, IError } from '../types';\nimport './cardDetails.css'\n\nexport interface ICardDetails {\n  formState: IFormState;\n  setHasErrors: (hasErrors: boolean) => void;\n  updateFormState: (formState: IFormState) => void;\n}\nexport const CardDetails = ({\n  formState,\n  setHasErrors,\n  updateFormState,\n}: ICardDetails) => {\n  const [errors, setErrors] = useDebounce<IError>({ \n    name: null,\n    cardNumber: null,\n    ccv2: null,\n    expM: null,\n    expY: null\n  }, 750)\n  const visaValidation = new VisaValidation();\n  const amexValidation = new AmexValidation();\n\n  useEffect(() => {\n    let validation = null;\n    const cardNumber = formState?.cardNumber;\n    if (cardNumber && cardNumber.toString()[0] === '3') {\n      // Use Amex validation\n      validation = amexValidation;\n    } else if (cardNumber && cardNumber.toString()[0] === '4') {\n      // Use Visa validation\n      validation = visaValidation;\n    } else {\n      // It doesn't matter... just using Visa\n      validation = visaValidation\n    }\n\n    setErrors({\n      name: validation.validateName(formState.name) || null,\n      cardNumber: validation.validateCardNumber(formState.cardNumber) || null,\n      ccv2: validation.validateCcv2(formState.ccv2) || null,\n      expM: validation.validateExpM(formState.expM) || null,\n      expY: validation.validateExpY(formState.expY) || null,\n    })\n    console.log(\"has errors\", (Object.values(errors)).every((value: any) => value === null))\n    setHasErrors((Object.values(errors)).every((value: any) => value === null))\n  }, [formState])\n\n  const updateValue = (event: React.FormEvent) => {\n    const target = event.target as HTMLSelectElement;\n    updateFormState({\n      ...formState,\n      [target.name]: target.value,\n    })\n  }\n  return (\n    <div className=\"cardDetails flex-column\">\n\n      <div className=\"flex-row\">\n        <input \n          className=\"cardDetails--input c12\"\n          type=\"text\" \n          name=\"name\"\n          placeholder=\"Name\" \n          value={formState.name}\n          onChange={updateValue}\n        />\n        <div className=\"cardDetails--error\">\n          {errors.name}\n        </div>\n      </div>\n\n      <div className=\"flex-row\">\n        <input \n          className=\"cardDetails--input c12\"\n          type=\"number\" \n          name=\"cardNumber\"\n          placeholder=\"Card Number\" \n          value={formState.cardNumber}\n          onChange={updateValue}\n        />\n        <div className=\"cardDetails--error\">\n          {errors.cardNumber}\n        </div>\n      </div>\n\n      <div className=\"flex-row\">\n        <input \n          className=\"cardDetails--input c12\"\n          type=\"number\" \n          name=\"ccv2\"\n          placeholder=\"CCV2\" \n          onChange={updateValue}\n          value={formState.ccv2}\n          disabled={!formState.cardNumber}\n        />\n        <div className=\"cardDetails--error\">\n          {errors.ccv2}\n        </div>\n      </div>\n\n      <div className=\"flex-row\">\n        <input \n          className=\"cardDetails--input c6\"\n          type=\"number\"\n          name=\"expM\"\n          placeholder=\"Exp. Month\" \n          value={formState.expM}\n          onChange={updateValue}\n        />\n        <input \n          className=\"cardDetails--input c6\"\n          type=\"number\"\n          name=\"expY\"\n          placeholder=\"Exp. Year\" \n          value={formState.expY}\n          onChange={updateValue}\n        />\n        <div className=\"cardDetails--error\">\n          {`${errors.expM ? errors.expM : ''} ${errors.expY ? errors.expY : ''}`}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default CardDetails","/Users/grigio/Sites/affirm/src/modules/cardForm/partials/cardImages.tsx",["44","45"],"import * as React from 'react';\nimport './cardImages.css'\n\nexport const CardImages = () => {\n\n  return (\n    <div>\n      <img src=\"https://www.merchantequip.com/image/?logos=v&height=64\"/>\n      <img className=\"coming-soon\" src=\"https://www.merchantequip.com/image/?logos=m&height=64\" alt=\"Not implemented\"/>\n      <img src=\"https://www.merchantequip.com/image/?logos=a&height=64\"/>\n      <img className=\"coming-soon\" src=\"https://www.merchantequip.com/image/?logos=d&height=64\" alt=\"Not implemented\"/>\n    </div>\n  );\n}\n\nexport default CardImages","/Users/grigio/Sites/affirm/src/common/validations/baseValidation.ts",[],"/Users/grigio/Sites/affirm/src/common/validations/visaValidation.ts",[],"/Users/grigio/Sites/affirm/src/common/validations/amexValidation.ts",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":51,"column":6,"nodeType":"52","endLine":51,"endColumn":17,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":8,"column":7,"nodeType":"56","endLine":8,"endColumn":74},{"ruleId":"54","severity":1,"message":"55","line":10,"column":7,"nodeType":"56","endLine":10,"endColumn":74},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'amexValidation', 'errors', 'setErrors', 'setHasErrors', and 'visaValidation'. Either include them or remove the dependency array. If 'setHasErrors' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["59"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [amexValidation, errors, formState, setErrors, setHasErrors, visaValidation]",{"range":"62","text":"63"},[1782,1793],"[amexValidation, errors, formState, setErrors, setHasErrors, visaValidation]"]